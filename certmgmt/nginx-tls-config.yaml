apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-tls-config
  namespace: e2etls-demo
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
        
        # Server block for HTTPS
        server {
            listen 8443 ssl http2;
            server_name _;
            
            # TLS Configuration
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/certs/tls.key;
            ssl_trusted_certificate /etc/ssl/certs/ca-bundle.crt;
            
            # Modern TLS settings
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            
            # HSTS
            add_header Strict-Transport-Security "max-age=63072000" always;
            
            # Default location
            location / {
                return 200 "Hello from NGINX with TLS! Server: $server_name, SSL Protocol: $ssl_protocol, SSL Cipher: $ssl_cipher, Time: $time_local, Request ID: $request_id, Pod: $hostname, Namespace: e2etls-demo";
                add_header Content-Type text/plain;
            }
            
            # Health check endpoint
            location /health {
                return 200 'healthy';
                add_header Content-Type text/plain;
                access_log off;
            }
            
            # Certificate information endpoint
            location /cert-info {
                return 200 "Certificate Details: SSL Protocol: $ssl_protocol, SSL Cipher: $ssl_cipher, SSL Session ID: $ssl_session_id, SSL Session Reused: $ssl_session_reused, Server Certificate: cert-manager generated, CA: Internal Root CA";
                add_header Content-Type text/plain;
            }
        }
        
        # Optional: Redirect HTTP to HTTPS (if HTTP port is exposed)
        server {
            listen 8080;
            server_name _;
            return 301 https://$server_name:8443$request_uri;
        }
    }
